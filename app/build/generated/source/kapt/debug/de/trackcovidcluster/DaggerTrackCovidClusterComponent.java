// Generated by Dagger (https://google.github.io/dagger).
package de.trackcovidcluster;

import android.app.Activity;
import android.app.Application;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import de.trackcovidcluster.changeStatus.ChangeStatusActivity;
import de.trackcovidcluster.changeStatus.ChangeStatusActivity_MembersInjector;
import de.trackcovidcluster.changeStatus.ChangeStatusViewModel;
import de.trackcovidcluster.changeStatus.ChangeStatusViewModel_Factory;
import de.trackcovidcluster.di.IChildRxWorkerFactory;
import de.trackcovidcluster.di.RxWorkerFactory;
import de.trackcovidcluster.di.ViewModelFactory;
import de.trackcovidcluster.di.ViewModelFactory_Factory;
import de.trackcovidcluster.main.MainActivity;
import de.trackcovidcluster.main.MainActivityViewModel;
import de.trackcovidcluster.main.MainActivityViewModel_Factory;
import de.trackcovidcluster.main.MainActivity_MembersInjector;
import de.trackcovidcluster.source.StatusStorageSource_Factory;
import de.trackcovidcluster.source.UserStorageSource_Factory;
import de.trackcovidcluster.status.StatusActivity;
import de.trackcovidcluster.status.StatusActivity_MembersInjector;
import de.trackcovidcluster.status.StatusViewModel;
import de.trackcovidcluster.status.StatusViewModel_Factory;
import de.trackcovidcluster.worker.GetStatusWorker;
import de.trackcovidcluster.worker.GetStatusWorker_Factory_Factory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerTrackCovidClusterComponent implements TrackCovidClusterComponent {
  private Provider<AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent
              .Builder>
      changeStatusActivitySubcomponentBuilderProvider;

  private Provider<AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Builder>
      statusActivitySubcomponentBuilderProvider;

  private Provider<Application> appProvider;

  private ApplicationModule_ProvideContextFactory provideContextProvider;

  private ApplicationModule_ProvideSharedPreferencesFactory provideSharedPreferencesProvider;

  private ApplicationModule_ProvideServerAdapterFactory provideServerAdapterProvider;

  private UserStorageSource_Factory userStorageSourceProvider;

  private GetStatusWorker_Factory_Factory factoryProvider;

  private MainActivityViewModel_Factory mainActivityViewModelProvider;

  private StatusStorageSource_Factory statusStorageSourceProvider;

  private StatusViewModel_Factory statusViewModelProvider;

  private ChangeStatusViewModel_Factory changeStatusViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerTrackCovidClusterComponent(Builder builder) {

    initialize(builder);
  }

  public static TrackCovidClusterComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(ChangeStatusActivity.class, (Provider) changeStatusActivitySubcomponentBuilderProvider)
        .put(StatusActivity.class, (Provider) statusActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private Map<Class<? extends ListenableWorker>, Provider<IChildRxWorkerFactory>>
      getMapOfClassOfAndProviderOfIChildRxWorkerFactory() {
    return Collections
        .<Class<? extends ListenableWorker>, Provider<IChildRxWorkerFactory>>singletonMap(
            GetStatusWorker.class, (Provider) factoryProvider);
  }

  private RxWorkerFactory getRxWorkerFactory() {
    return new RxWorkerFactory(getMapOfClassOfAndProviderOfIChildRxWorkerFactory());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.changeStatusActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent
                .Builder>() {
          @Override
          public AndroidBuilderModule_ContributeChangeStatusActivity
                  .ChangeStatusActivitySubcomponent.Builder
              get() {
            return new ChangeStatusActivitySubcomponentBuilder();
          }
        };
    this.statusActivitySubcomponentBuilderProvider =
        new Provider<
            AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Builder>() {
          @Override
          public AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Builder
              get() {
            return new StatusActivitySubcomponentBuilder();
          }
        };
    this.appProvider = InstanceFactory.create(builder.app);
    this.provideContextProvider =
        ApplicationModule_ProvideContextFactory.create(builder.applicationModule, appProvider);
    this.provideSharedPreferencesProvider =
        ApplicationModule_ProvideSharedPreferencesFactory.create(
            builder.applicationModule, provideContextProvider);
    this.provideServerAdapterProvider =
        ApplicationModule_ProvideServerAdapterFactory.create(builder.applicationModule);
    this.userStorageSourceProvider =
        UserStorageSource_Factory.create(
            provideSharedPreferencesProvider, provideServerAdapterProvider);
    this.factoryProvider =
        GetStatusWorker_Factory_Factory.create((Provider) userStorageSourceProvider);
    this.mainActivityViewModelProvider =
        MainActivityViewModel_Factory.create(userStorageSourceProvider);
    this.statusStorageSourceProvider =
        StatusStorageSource_Factory.create(provideSharedPreferencesProvider);
    this.statusViewModelProvider =
        StatusViewModel_Factory.create(
            (Provider) statusStorageSourceProvider, (Provider) userStorageSourceProvider);
    this.changeStatusViewModelProvider =
        ChangeStatusViewModel_Factory.create(userStorageSourceProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3)
            .put(MainActivityViewModel.class, (Provider) mainActivityViewModelProvider)
            .put(StatusViewModel.class, (Provider) statusViewModelProvider)
            .put(ChangeStatusViewModel.class, (Provider) changeStatusViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(TrackCovidClusterApplication app) {
    injectTrackCovidClusterApplication(app);
  }

  private TrackCovidClusterApplication injectTrackCovidClusterApplication(
      TrackCovidClusterApplication instance) {
    TrackCovidClusterApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    TrackCovidClusterApplication_MembersInjector.injectMRxWorkerFactory(
        instance, getRxWorkerFactory());
    return instance;
  }

  private static final class Builder implements TrackCovidClusterComponent.Builder {
    private ApplicationModule applicationModule;

    private Application app;

    @Override
    public TrackCovidClusterComponent build() {
      if (applicationModule == null) {
        this.applicationModule = new ApplicationModule();
      }
      Preconditions.checkBuilderRequirement(app, Application.class);
      return new DaggerTrackCovidClusterComponent(this);
    }

    @Override
    public Builder app(Application app) {
      this.app = Preconditions.checkNotNull(app);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, MainActivity.class);
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectMViewModelFactory(
          instance, DaggerTrackCovidClusterComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ChangeStatusActivitySubcomponentBuilder
      extends AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent
          .Builder {
    private ChangeStatusActivity seedInstance;

    @Override
    public AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent
        build() {
      Preconditions.checkBuilderRequirement(seedInstance, ChangeStatusActivity.class);
      return new ChangeStatusActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ChangeStatusActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ChangeStatusActivitySubcomponentImpl
      implements AndroidBuilderModule_ContributeChangeStatusActivity
          .ChangeStatusActivitySubcomponent {
    private ChangeStatusActivitySubcomponentImpl(ChangeStatusActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(ChangeStatusActivity arg0) {
      injectChangeStatusActivity(arg0);
    }

    private ChangeStatusActivity injectChangeStatusActivity(ChangeStatusActivity instance) {
      ChangeStatusActivity_MembersInjector.injectMViewModelFactory(
          instance, DaggerTrackCovidClusterComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class StatusActivitySubcomponentBuilder
      extends AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Builder {
    private StatusActivity seedInstance;

    @Override
    public AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, StatusActivity.class);
      return new StatusActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(StatusActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class StatusActivitySubcomponentImpl
      implements AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent {
    private StatusActivitySubcomponentImpl(StatusActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(StatusActivity arg0) {
      injectStatusActivity(arg0);
    }

    private StatusActivity injectStatusActivity(StatusActivity instance) {
      StatusActivity_MembersInjector.injectMViewModelFactory(
          instance, DaggerTrackCovidClusterComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
