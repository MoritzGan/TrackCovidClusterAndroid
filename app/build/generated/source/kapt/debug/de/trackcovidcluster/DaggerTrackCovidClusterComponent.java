// Generated by Dagger (https://dagger.dev).
package de.trackcovidcluster;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import de.trackcovidcluster.changeStatus.ChangeStatusActivity;
import de.trackcovidcluster.changeStatus.ChangeStatusActivity_MembersInjector;
import de.trackcovidcluster.changeStatus.ChangeStatusViewModel;
import de.trackcovidcluster.changeStatus.ChangeStatusViewModel_Factory;
import de.trackcovidcluster.di.IChildRxWorkerFactory;
import de.trackcovidcluster.di.RxWorkerFactory;
import de.trackcovidcluster.di.ViewModelFactory;
import de.trackcovidcluster.di.ViewModelFactory_Factory;
import de.trackcovidcluster.main.MainActivity;
import de.trackcovidcluster.main.MainActivityViewModel;
import de.trackcovidcluster.main.MainActivityViewModel_Factory;
import de.trackcovidcluster.main.MainActivity_MembersInjector;
import de.trackcovidcluster.source.StatusStorageSource;
import de.trackcovidcluster.source.StatusStorageSource_Factory;
import de.trackcovidcluster.source.UserStorageSource;
import de.trackcovidcluster.source.UserStorageSource_Factory;
import de.trackcovidcluster.status.StatusActivity;
import de.trackcovidcluster.status.StatusActivity_MembersInjector;
import de.trackcovidcluster.status.StatusViewModel;
import de.trackcovidcluster.status.StatusViewModel_Factory;
import de.trackcovidcluster.worker.GetStatusWorker;
import de.trackcovidcluster.worker.GetStatusWorker_Factory_Factory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerTrackCovidClusterComponent implements TrackCovidClusterComponent {
  private Provider<AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent.Factory> changeStatusActivitySubcomponentFactoryProvider;

  private Provider<AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Factory> statusActivitySubcomponentFactoryProvider;

  private Provider<Application> appProvider;

  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<UserStorageSource> userStorageSourceProvider;

  private Provider<StatusStorageSource> statusStorageSourceProvider;

  private Provider<GetStatusWorker.Factory> factoryProvider;

  private Provider<MainActivityViewModel> mainActivityViewModelProvider;

  private Provider<StatusViewModel> statusViewModelProvider;

  private Provider<ChangeStatusViewModel> changeStatusViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerTrackCovidClusterComponent(ApplicationModule applicationModuleParam,
      Application appParam) {

    initialize(applicationModuleParam, appParam);
  }

  public static TrackCovidClusterComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(ChangeStatusActivity.class, (Provider) changeStatusActivitySubcomponentFactoryProvider).put(StatusActivity.class, (Provider) statusActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private Map<Class<? extends ListenableWorker>, Provider<IChildRxWorkerFactory>> getMapOfClassOfAndProviderOfIChildRxWorkerFactory(
      ) {
    return Collections.<Class<? extends ListenableWorker>, Provider<IChildRxWorkerFactory>>singletonMap(GetStatusWorker.class, (Provider) factoryProvider);}

  private RxWorkerFactory getRxWorkerFactory() {
    return new RxWorkerFactory(getMapOfClassOfAndProviderOfIChildRxWorkerFactory());}

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam,
      final Application appParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.changeStatusActivitySubcomponentFactoryProvider = new Provider<AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent.Factory>() {
      @Override
      public AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent.Factory get(
          ) {
        return new ChangeStatusActivitySubcomponentFactory();}
    };
    this.statusActivitySubcomponentFactoryProvider = new Provider<AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Factory>() {
      @Override
      public AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Factory get(
          ) {
        return new StatusActivitySubcomponentFactory();}
    };
    this.appProvider = InstanceFactory.create(appParam);
    this.provideContextProvider = ApplicationModule_ProvideContextFactory.create(applicationModuleParam, appProvider);
    this.provideSharedPreferencesProvider = ApplicationModule_ProvideSharedPreferencesFactory.create(applicationModuleParam, provideContextProvider);
    this.userStorageSourceProvider = UserStorageSource_Factory.create(provideSharedPreferencesProvider);
    this.statusStorageSourceProvider = StatusStorageSource_Factory.create(provideSharedPreferencesProvider);
    this.factoryProvider = GetStatusWorker_Factory_Factory.create((Provider) userStorageSourceProvider, (Provider) statusStorageSourceProvider);
    this.mainActivityViewModelProvider = MainActivityViewModel_Factory.create(userStorageSourceProvider);
    this.statusViewModelProvider = StatusViewModel_Factory.create((Provider) statusStorageSourceProvider, (Provider) userStorageSourceProvider);
    this.changeStatusViewModelProvider = ChangeStatusViewModel_Factory.create(userStorageSourceProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3).put(MainActivityViewModel.class, (Provider) mainActivityViewModelProvider).put(StatusViewModel.class, (Provider) statusViewModelProvider).put(ChangeStatusViewModel.class, (Provider) changeStatusViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(TrackCovidClusterApplication app) {
    injectTrackCovidClusterApplication(app);}

  private TrackCovidClusterApplication injectTrackCovidClusterApplication(
      TrackCovidClusterApplication instance) {
    TrackCovidClusterApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    TrackCovidClusterApplication_MembersInjector.injectMRxWorkerFactory(instance, getRxWorkerFactory());
    return instance;
  }

  private static final class Builder implements TrackCovidClusterComponent.Builder {
    private Application app;

    @Override
    public Builder app(Application app) {
      this.app = Preconditions.checkNotNull(app);
      return this;
    }

    @Override
    public TrackCovidClusterComponent build() {
      Preconditions.checkBuilderRequirement(app, Application.class);
      return new DaggerTrackCovidClusterComponent(new ApplicationModule(), app);
    }
  }

  private final class MainActivitySubcomponentFactory implements AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements AndroidBuilderModule_ContributeMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectMViewModelFactory(instance, DaggerTrackCovidClusterComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class ChangeStatusActivitySubcomponentFactory implements AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent.Factory {
    @Override
    public AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent create(
        ChangeStatusActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new ChangeStatusActivitySubcomponentImpl(arg0);
    }
  }

  private final class ChangeStatusActivitySubcomponentImpl implements AndroidBuilderModule_ContributeChangeStatusActivity.ChangeStatusActivitySubcomponent {
    private ChangeStatusActivitySubcomponentImpl(ChangeStatusActivity arg0) {

    }

    @Override
    public void inject(ChangeStatusActivity arg0) {
      injectChangeStatusActivity(arg0);}

    private ChangeStatusActivity injectChangeStatusActivity(ChangeStatusActivity instance) {
      ChangeStatusActivity_MembersInjector.injectMViewModelFactory(instance, DaggerTrackCovidClusterComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class StatusActivitySubcomponentFactory implements AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent.Factory {
    @Override
    public AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent create(
        StatusActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatusActivitySubcomponentImpl(arg0);
    }
  }

  private final class StatusActivitySubcomponentImpl implements AndroidBuilderModule_ContributeStatusActivity.StatusActivitySubcomponent {
    private StatusActivitySubcomponentImpl(StatusActivity arg0) {

    }

    @Override
    public void inject(StatusActivity arg0) {
      injectStatusActivity(arg0);}

    private StatusActivity injectStatusActivity(StatusActivity instance) {
      StatusActivity_MembersInjector.injectMViewModelFactory(instance, DaggerTrackCovidClusterComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
